#!/usr/bin/env ruby

require 'optparse'

begin
  require 'redwood'
rescue LoadError
  raise if $!.to_s !~ /redwood/
  libdir = File.expand_path("../../lib", __FILE__).sub(/^#{Dir.pwd}/, '.')
  if !$:.include?(libdir)
    $:.unshift libdir
    retry
  end
  raise
end

options = {
  :follow_symlinks => false,
  :show_hidden_files => false
}

def statement(tree)
  directories = 0
  files = 0
  tree.descendants.each do |f|
    if f.directory?
      directories += 1
    else
      files += 1
    end
  end
  d = directories.eql?(1) ? 'directory' : 'directories'
  f = files.eql?(1) ? 'file' : 'files'
  "#{directories} #{d}, #{files} #{f}"
end

def setup_tree(tree, options)
  if !options[:follow_symlinks]
    tree.descendants.each do |f|
      if f.symlink?        
        f.value = "#{f.basename} -> #{f.readlink}"
      end
      f.unlink if f.parent.symlink?
    end
  end
  if !options[:show_hidden_files]
    tree.descendants.each do |f| 
        f.unlink if f.basename.index('.').eql?(0)
    end
  end
  tree
end

if ARGV.empty?
  tree = setup_tree(Redwood::FileNode.scandir('.'), options)
  puts tree.view(:value)
  puts "\n"
  puts statement(tree)
  exit
end
  